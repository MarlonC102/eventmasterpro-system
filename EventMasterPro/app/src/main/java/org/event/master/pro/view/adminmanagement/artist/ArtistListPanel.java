/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.event.master.pro.view.adminmanagement.artist;

import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.event.master.pro.person.account.Account;
import org.event.master.pro.person.artist.Artist;
import org.event.master.pro.person.artist.ArtistDAO;
import org.event.master.pro.util.FormatUtil;
import static org.event.master.pro.util.ShowPanelUtil.*;
import org.event.master.pro.util.UIUtil;

/**
 *
 * @author Luisa
 */
public class ArtistListPanel extends javax.swing.JPanel {

    private final JFrame container;
    ArtistDAO artist = new ArtistDAO();
    Account account = new Account();

    /**
     * Creates new form ArtistListPanel
     */
    public ArtistListPanel(JFrame container) {
        initComponents();
        this.container = container;
        tableArtist();
        jScrollPane1.getViewport().setBackground(UIManager.getColor("Table.background"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        artistTable = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(1000, 300));

        artistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Document", "Artist Name", "Genre", "Price", "Availability", "See", "Edit", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(artistTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void tableArtist() {
        List<Artist> artists = artist.consultArtist();
        DefaultTableModel modelTableArtist = (DefaultTableModel) artistTable.getModel();
        for (Artist a : artists) {
            Object document = a.getDocumenNumber();
            modelTableArtist.addRow(new Object[]{document, a.getName(), a.getGenre(), FormatUtil.formatNumber(a.getPrice()), a.isAvailability(), "See", "Edit", "Delete"});
        }
        //UIUtil.hideButtons(account.getRol(), artistTable);
        buttonsEvent();
    }

    //Eventos para los botones Edit y Delete ya que fueron elementos a√±adidos manualmente a la tabla
    private void buttonsEvent() {
        artistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonFunctional(evt);
            }
        });
    }

    public void buttonFunctional(java.awt.event.MouseEvent evt) {
        int row = artistTable.rowAtPoint(evt.getPoint());
        int column = artistTable.columnAtPoint(evt.getPoint());
        String document = artistTable.getValueAt(row, 0).toString();
        if (column == artistTable.getColumnModel().getColumnIndex("Edit")) {
            showEditArtistPanel(container, document);
        } else if (column == artistTable.getColumnModel().getColumnIndex("Delete")) {
            int confirmado = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete the artist?",
                    "Confirm",
                    JOptionPane.YES_NO_OPTION
            );
            if (confirmado == JOptionPane.YES_OPTION) {
                try {
                    artist.changeStatusArtist(document);
                    switchToPanel(container, new ArtistListPanel(container));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Cannot Deactivate Artist", JOptionPane.WARNING_MESSAGE);

                }
            }
        } else if (column == artistTable.getColumnModel().getColumnIndex("See")) {
            showSeeArtistPanel(container, document);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable artistTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
