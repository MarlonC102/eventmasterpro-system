/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.event.master.pro.view.organizermanagement.eventManagement;

import java.awt.Color;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.event.master.pro.event.Event.Event;
import org.event.master.pro.event.Event.EventDAO;
import org.event.master.pro.event.ticket.Ticket;
import org.event.master.pro.person.artist.Artist;
import static org.event.master.pro.util.ShowPanelUtil.*;
import org.event.master.pro.util.UIUtil;

/**
 *
 * @author Luisa
 */
public class EditEventPanel extends javax.swing.JPanel {

    EventDAO edao = new EventDAO();
    private final JFrame container;
    private int event;
    private String type;
    List<Artist> invited;
    List<Ticket> ticket;
    private List<Ticket> tickets;

    /**
     * Creates new form EventListPanel
     */
    public EditEventPanel(JFrame container, int event) throws SQLException {
        initComponents();
        this.container = container;
        this.event = event;
        eventData();
        disableAll();
        propertiePlaceHolder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        eventClassification = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        eventName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        eventDuration = new javax.swing.JTextField();
        eventSponsor = new javax.swing.JTextField();
        eventDurationTitle = new javax.swing.JLabel();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        eventType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        eventQuorum = new javax.swing.JTextField();
        eventLocation = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        eventDescription = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        principalArtist = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        invitedArtist = new javax.swing.JTextField();
        ticketEvent = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        editInvitedArtist = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        eventClassification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A (All audiences)", "B (With adult accompaniment)", "+12 (Over 12 years old)", "+15 (Over 15 years old)", "+18 (Adults only)" }));
        eventClassification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventClassificationActionPerformed(evt);
            }
        });

        jLabel3.setText("Date");

        jLabel8.setText("Classification");

        jLabel10.setText("Quorum");

        eventDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventDurationActionPerformed(evt);
            }
        });

        eventSponsor.setPreferredSize(null);

        jLabel9.setText("Name");

        jLabel6.setText("Sponsor");

        jLabel2.setText("Event Type");

        eventType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Concert", "Conference", "Festival" }));
        eventType.setMinimumSize(new java.awt.Dimension(64, 22));
        eventType.setPreferredSize(new java.awt.Dimension(64, 22));
        eventType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventTypeActionPerformed(evt);
            }
        });

        jLabel7.setText("Location");

        eventQuorum.setPreferredSize(new java.awt.Dimension(143, 22));

        eventLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventLocationActionPerformed(evt);
            }
        });

        jLabel12.setText("Description");

        jLabel11.setText("Principal Artist");

        principalArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalArtistActionPerformed(evt);
            }
        });

        jLabel14.setText("Invited Artists");

        jLabel1.setText("Tickets");

        invitedArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invitedArtistActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        editInvitedArtist.setText("Edit");
        editInvitedArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editInvitedArtistActionPerformed(evt);
            }
        });

        jLabel4.setText("Edit Event");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saveButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventDurationTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                        .addComponent(eventClassification, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventDuration)
                        .addComponent(eventName)
                        .addComponent(eventSponsor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventQuorum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(principalArtist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventDescription)
                    .addComponent(ticketEvent)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invitedArtist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editInvitedArtist))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelButton))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel9});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventSponsor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(principalArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventQuorum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ticketEvent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventDurationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invitedArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editInvitedArtist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        showListEventPanel(container);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void eventClassificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventClassificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventClassificationActionPerformed

    private void eventLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventLocationActionPerformed

    }//GEN-LAST:event_eventLocationActionPerformed

    private void eventTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventTypeActionPerformed

    private void principalArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalArtistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_principalArtistActionPerformed

    private void eventDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventDurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventDurationActionPerformed

    private void editInvitedArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editInvitedArtistActionPerformed
        //int q = Integer.parseInt(eventQuorum.getText());
        InvitedArtistPanel iap = new InvitedArtistPanel(0, principalArtist.getSelectedItem().toString(), invited);
        int option = JOptionPane.showConfirmDialog(
                null,
                iap,
                "Edit invited artists",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (option == JOptionPane.OK_OPTION) {
            invited = iap.saveArtistInvited();
        }
    }//GEN-LAST:event_editInvitedArtistActionPerformed

    private void invitedArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invitedArtistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invitedArtistActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        LocalDateTime dateTime = dateTimePicker.getDateTimeStrict();
        String name = eventName.getText();
        String sponsorEvent = eventSponsor.getText();
        String classificationEvent = eventClassification.getSelectedItem().toString();
        String descriptionEvent = eventDescription.getText();
        int duration = Integer.parseInt(eventDuration.getText());

        try {
            Event updatedEvent = new Event(name, descriptionEvent, dateTime, duration, sponsorEvent, classificationEvent, invited);
            updatedEvent.setIdEvent(event); 
            edao.editEvent(updatedEvent);
            showListEventPanel(container);
        } catch (SQLException ex) {
            Logger.getLogger(CreateEventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public void propertiePlaceHolder() {
        UIUtil.propertiesText(principalArtist, Color.WHITE);
        UIUtil.propertiesText(eventQuorum, Color.WHITE);
        UIUtil.propertiesText(eventType, Color.WHITE);
        UIUtil.propertiesText(ticketEvent, Color.WHITE);
        UIUtil.propertiesText(invitedArtist, Color.WHITE);
        UIUtil.propertiesText(eventLocation, Color.WHITE);
    }

    public List<Artist> invitedArtistData(List<Artist> invited) {
        List<String> art = new ArrayList<>();
        List<Artist> a = new ArrayList<>();
        for (Artist artist : invited) {
            if (artist != null) {
                art.add(artist.getName());
            }
        }
        if (invited != null && !invited.isEmpty()) {
            invitedArtist.setText(String.join(", ", art));
        } else {
            invitedArtist.setText("Without guest artists.");
        }
        return a;
    }

    public void ticketData(List<Ticket> ticket) {
        List<String> listTicket = new ArrayList<>();
        for (Ticket t : ticket) {
            if (ticket != null) {
                listTicket.add("Zone: " + t.getZone() + ", quantity: " + t.getSeatNumber());
            }
        }
        if (ticket != null && !ticket.isEmpty()) {
            ticketEvent.setText(String.join("\n ", listTicket));
        } else {
            ticketEvent.setText("Tickets not found.");
        }
    }


    public void eventData() throws SQLException {
        Event eventI = edao.consultEventById(event);
        type = eventI.getType();
        eventName.setText(eventI.getName());
        dateTimePicker.setDateTimePermissive(eventI.getDateTimeEvent());
        eventSponsor.setText(eventI.getSponsor());
        eventClassification.setSelectedItem(eventI.getClassification());
        principalArtist.addItem(eventI.getArtist().getArtisticName());
        eventQuorum.setText(String.valueOf(eventI.getParticipantsNumbers()));
        eventDuration.setText(String.valueOf(eventI.getDuration()));
        eventType.setSelectedItem(eventI.getType());
        eventLocation.addItem(eventI.getLocation().getName());
        eventDescription.setText(eventI.getDescription());
        eventDurationTitle.setText("Event duration in hours");
        invited = eventI.getInvitedArtist();
        ticket = eventI.getTickets();
        ticketData(ticket);
        invitedArtistData(invited);
        System.out.println("edit event " + event);
    }

    public void disableAll() {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JButton editInvitedArtist;
    private javax.swing.JComboBox<String> eventClassification;
    private javax.swing.JTextPane eventDescription;
    private javax.swing.JTextField eventDuration;
    private javax.swing.JLabel eventDurationTitle;
    private javax.swing.JComboBox<String> eventLocation;
    private javax.swing.JTextField eventName;
    private javax.swing.JTextField eventQuorum;
    private javax.swing.JTextField eventSponsor;
    private javax.swing.JComboBox<String> eventType;
    private javax.swing.JTextField invitedArtist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> principalArtist;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField ticketEvent;
    // End of variables declaration//GEN-END:variables
}
