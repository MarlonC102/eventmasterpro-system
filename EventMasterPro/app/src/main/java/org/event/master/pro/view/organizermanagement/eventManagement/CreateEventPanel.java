/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.event.master.pro.view.organizermanagement.eventManagement;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.event.master.pro.event.Event.Event;
import org.event.master.pro.event.Event.EventDAO;
import org.event.master.pro.event.location.Location;
import org.event.master.pro.event.location.LocationUI;
import org.event.master.pro.event.ticket.Ticket;
import org.event.master.pro.person.artist.Artist;
import org.event.master.pro.person.artist.ArtistUI;
import static org.event.master.pro.util.ShowPanelUtil.*;

/**
 *
 * @author Luisa
 */
public class CreateEventPanel extends JPanel {

    EventDAO edao = new EventDAO();
    ArtistUI artistUI = new ArtistUI();
    LocationUI location = new LocationUI();
    List<Artist> invited = new ArrayList<Artist>();
    private List<Location> locationList;
    private List<Artist> eventArtists;
    private List<Artist> eventArtistsI;
    private List<Ticket> tickets;
    private JFrame container;
    Location selectedLocation;
    Artist selecttPrincipalArtist;

    //dynamicContentPanel = new JPanel(new BorderLayout());
    /**
     * Creates new form EventCreatePanel
     */
    public CreateEventPanel(JFrame container) {
        initComponents();
        //eventCreatePanel.removeAll();
        this.container = container;
        getLocationCombo();
        newPanel();
        dateTimePicker.setPreferredSize(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        saveEvent = new javax.swing.JButton();
        eventClassification = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        eventName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        eventDuration = new javax.swing.JTextField();
        eventSponsor = new javax.swing.JTextField();
        eventDurationTitle = new javax.swing.JLabel();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        invitedArtist = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        eventType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        eventQuorum = new javax.swing.JTextField();
        eventLocation = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        addInvitedArtistButton = new javax.swing.JButton();
        principalArtist = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        createTickets = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventDescription = new javax.swing.JTextPane();
        jLabel13 = new javax.swing.JLabel();

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveEvent.setText("Save");
        saveEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEventActionPerformed(evt);
            }
        });

        eventClassification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A (All audiences)", "B (With adult accompaniment)", "+12 (Over 12 years old)", "+15 (Over 15 years old)", "+18 (Adults only)" }));

        jLabel3.setText("Date");

        jLabel10.setText("Quorum");

        eventSponsor.setPreferredSize(null);

        dateTimePicker.setMinimumSize(new java.awt.Dimension(72, 28));
        dateTimePicker.setPreferredSize(new java.awt.Dimension(143, 22));

        jLabel9.setText("Name");

        jLabel6.setText("Sponsor");

        jLabel2.setText("Event Type");

        eventType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Concert", "Conference", "Festival" }));
        eventType.setMinimumSize(new java.awt.Dimension(64, 22));
        eventType.setPreferredSize(new java.awt.Dimension(64, 22));

        jLabel7.setText("Location");

        eventQuorum.setPreferredSize(new java.awt.Dimension(143, 22));

        jLabel12.setText("Description");

        jLabel11.setText("Main Collaborator");

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        addInvitedArtistButton.setText("+");
        addInvitedArtistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInvitedArtistButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Guest Contributor");

        createTickets.setText("Create Tickets");
        createTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTicketsActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(eventDescription);

        jLabel13.setText("Classification");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveEvent, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(eventDuration, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(eventQuorum, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventSponsor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventDurationTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventClassification, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cancelButton)
                        .addComponent(jLabel12)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(principalArtist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(invitedArtist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addInvitedArtistButton))
                        .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateTimePicker, eventClassification, eventDuration, eventLocation, eventName, eventSponsor, eventType, principalArtist});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eventName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventSponsor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(principalArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eventClassification, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createTickets)
                            .addComponent(eventQuorum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invitedArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addInvitedArtistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveEvent)
                            .addComponent(cancelButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(eventDurationTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addInvitedArtistButton, createTickets, dateTimePicker, eventClassification, eventDuration, eventLocation, eventName, eventQuorum, eventSponsor, eventType, invitedArtist, principalArtist});

    }// </editor-fold>//GEN-END:initComponents


    private void saveEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEventActionPerformed
        if (eventName.getText() == null || eventName.getText().isEmpty()
                || eventType.getSelectedItem() == null
                || eventSponsor.getText() == null || eventSponsor.getText().isEmpty()
                || eventClassification.getSelectedItem() == null
                || eventDescription.getText() == null || eventDescription.getText().isEmpty()
                || eventQuorum.getText() == null || eventQuorum.getText().isEmpty()
                || eventDuration.getText() == null || eventDuration.getText().isEmpty()
                || dateTimePicker.getDateTimeStrict() == null
                || eventLocation.getSelectedItem() == null ) {
                
            JOptionPane.showMessageDialog(this, "All required fields must be filled in.");
            return;
        }
        if (tickets == null || tickets.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tickets need to be assigned to the event.");
            return;
        }
        LocalDateTime dateTime = dateTimePicker.getDateTimeStrict();
        if (dateTime == null || !dateTime.isAfter(LocalDateTime.now())) {
            JOptionPane.showMessageDialog(this, "The date must be greater than the current date");
            return;
        }

        String name = eventName.getText();
        String typeEvent = eventType.getSelectedItem().toString();
        String sponsorEvent = eventSponsor.getText();
        selecttPrincipalArtist = (Artist) principalArtist.getSelectedItem();
        String classificationEvent = eventClassification.getSelectedItem().toString();
        String descriptionEvent = eventDescription.getText();
        int quorumEvent = Integer.parseInt(eventQuorum.getText());
        int duration = Integer.parseInt(eventDuration.getText());
        selectedLocation = (Location) eventLocation.getSelectedItem();
        selecttPrincipalArtist = (Artist) principalArtist.getSelectedItem();

        try {
            
                edao.saveEvent(new Event(name, descriptionEvent, dateTime, selectedLocation, duration, sponsorEvent, classificationEvent, quorumEvent, selecttPrincipalArtist, invited, typeEvent),
                    tickets);
            
            showListEventPanel(container);
        } catch (IllegalStateException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Event Conflict", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_saveEventActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        showOrganizerHome(container);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addInvitedArtistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInvitedArtistButtonActionPerformed
        /*Artist selected = (Artist) invitedArtist.getSelectedItem();
        if (selected != null) {
            invited.add(selected);
        }*/
        InvitedArtistPanel iap = new InvitedArtistPanel(0, invited);
        int option = JOptionPane.showConfirmDialog(
                null,
                iap,
                "Add invited artists",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE
        );

        if (option == JOptionPane.OK_OPTION) {
            invited = iap.saveArtistInvited();
        }
    }//GEN-LAST:event_addInvitedArtistButtonActionPerformed

    private void createTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTicketsActionPerformed
        int q = Integer.parseInt(eventQuorum.getText());
        TicketCreatePanel ccp = new TicketCreatePanel(q);
        JOptionPane.showConfirmDialog(
                null,
                ccp,
                "Create tickets and its categories",
                JOptionPane.PLAIN_MESSAGE
        );
        tickets = ccp.saveTickets();
    }//GEN-LAST:event_createTicketsActionPerformed

    public void getLocationCombo() {
        locationList = location.locationList(eventLocation);
    }

    public void getArtistCombo() {
        eventArtists = artistUI.artistList(principalArtist);
    }

    public void setComboArtistI() {
        principalArtist.addActionListener(e -> {
            Object selectedItem = principalArtist.getSelectedItem();
            invitedArtist.removeAllItems();
            if (selectedItem != null) {
                eventArtistsI = artistUI.artistList(invitedArtist, selectedItem.toString());
            }
        });
    }

    public void newPanel() {
        String selectedType = eventType.getSelectedItem().toString();
        String ticketQ = eventQuorum.getText().trim();
        List<String> event = new ArrayList<String>();
        if (selectedType.equals("Concert")) {
            eventDurationTitle.setText("In Hours");
            String name = eventName.getText();
            principalArtist.removeAllItems();
            setComboArtistI();
            eventArtists = artistUI.artistList(principalArtist);
            title.setText("Create Concert");

            if (!ticketQ.isBlank() || name.isBlank()) {

                //eventCreatePanel.setLayout(new BorderLayout());
                //eventCreatePanel.add(concertPanel, BorderLayout.CENTER);
            } else {

            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInvitedArtistButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createTickets;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JComboBox<String> eventClassification;
    private javax.swing.JTextPane eventDescription;
    private javax.swing.JTextField eventDuration;
    private javax.swing.JLabel eventDurationTitle;
    private javax.swing.JComboBox<String> eventLocation;
    private javax.swing.JTextField eventName;
    private javax.swing.JTextField eventQuorum;
    private javax.swing.JTextField eventSponsor;
    private javax.swing.JComboBox<String> eventType;
    private javax.swing.JComboBox<String> invitedArtist;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> principalArtist;
    private javax.swing.JButton saveEvent;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
