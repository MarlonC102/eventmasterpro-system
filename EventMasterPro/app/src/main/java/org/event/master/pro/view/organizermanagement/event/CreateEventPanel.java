/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.event.master.pro.view.organizermanagement.event;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.event.master.pro.event.Concert.Concert;
import org.event.master.pro.event.Concert.ConcertDAO;
import org.event.master.pro.event.location.Location;
import org.event.master.pro.event.location.LocationUI;
import org.event.master.pro.event.ticket.Ticket;
import org.event.master.pro.person.artist.Artist;
import org.event.master.pro.person.artist.ArtistUI;
import org.event.master.pro.person.speaker.SpeakerUI;
import static org.event.master.pro.util.ShowPanelUtil.*;

/**
 *
 * @author Luisa
 */
public class CreateEventPanel extends JPanel {
    ConcertDAO cdao = new ConcertDAO();
    Concert conter = new Concert();
    ArtistUI artistUI = new ArtistUI();
    LocationUI location = new LocationUI();
    List<Artist> invited = new ArrayList<Artist>();
    private List<Location> locationList;
    private List<Artist> eventArtists;
    private List<Artist> eventArtistsI;
    private List<Ticket> tickets;
    private JFrame container;
    Location selectedLocation;
    Artist selecttPrincipalArtist;
    Artist selectInvitedArtist;
    //dynamicContentPanel = new JPanel(new BorderLayout());
    /**
     * Creates new form EventCreatePanel
     */
    public CreateEventPanel(JFrame container) {
        initComponents();
        //eventCreatePanel.removeAll();
        this.container = container;
        getLocationCombo();
        newPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        saveEvent = new javax.swing.JButton();
        eventClassification = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        eventName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        eventDuration = new javax.swing.JTextField();
        eventSponsor = new javax.swing.JTextField();
        eventDurationTitle = new javax.swing.JLabel();
        dateTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        invitedArtist = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        eventType = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        eventQuorum = new javax.swing.JTextField();
        eventLocation = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        eventDescription = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        addInvitedArtistButton = new javax.swing.JButton();
        principalArtist = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        createTickets = new javax.swing.JButton();

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveEvent.setText("Save");
        saveEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEventActionPerformed(evt);
            }
        });

        eventClassification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A (All audiences)", "B (With adult accompaniment)", "+12 (Over 12 years old)", "+15 (Over 15 years old)", "+18 (Adults only)" }));
        eventClassification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventClassificationActionPerformed(evt);
            }
        });

        jLabel3.setText("Date");

        jLabel8.setText("Classification");

        jLabel10.setText("Quorum");

        eventSponsor.setPreferredSize(null);

        jLabel9.setText("Name");

        jLabel6.setText("Sponsor");

        invitedArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invitedArtistActionPerformed(evt);
            }
        });

        jLabel2.setText("Event Type");

        eventType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Concert", "Conference", "Festival" }));
        eventType.setMinimumSize(new java.awt.Dimension(64, 22));
        eventType.setPreferredSize(new java.awt.Dimension(64, 22));
        eventType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventTypeActionPerformed(evt);
            }
        });

        jLabel7.setText("Location");

        eventQuorum.setPreferredSize(new java.awt.Dimension(143, 22));
        eventQuorum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventQuorumActionPerformed(evt);
            }
        });

        eventLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventLocationActionPerformed(evt);
            }
        });

        jLabel12.setText("Description");

        jLabel11.setText("Principal Artist");

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        addInvitedArtistButton.setText("+");
        addInvitedArtistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInvitedArtistButtonActionPerformed(evt);
            }
        });

        principalArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principalArtistActionPerformed(evt);
            }
        });

        jLabel14.setText("Invited Artists");

        createTickets.setText("Create Tickets");
        createTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTicketsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(214, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 259, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 286, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 297, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventDurationTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateTimePicker, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventSponsor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(eventQuorum, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createTickets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(eventClassification, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventDuration, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventName, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventLocation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(invitedArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addInvitedArtistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(principalArtist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventDescription)
                    .addComponent(eventType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(144, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(421, Short.MAX_VALUE)
                .addComponent(saveEvent, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addContainerGap(426, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(408, Short.MAX_VALUE)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(403, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eventSponsor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(eventType, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 13, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(eventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(principalArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(jLabel12)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eventClassification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(eventQuorum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createTickets)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(eventDescription)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventDurationTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(invitedArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(eventDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addInvitedArtistButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveEvent)
                    .addComponent(cancelButton))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void eventLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventLocationActionPerformed
       
        
    }//GEN-LAST:event_eventLocationActionPerformed

        
        
    private void saveEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEventActionPerformed
        LocalDateTime dateTime = dateTimePicker.getDateTimeStrict(); 
        String name = eventName.getText();
        String typeEvent = eventType.getSelectedItem().toString();
        LocalDateTime time = dateTimePicker.getDateTimeStrict();
        String locationEvent = eventLocation.getSelectedItem().toString();
        String sponsorEvent = eventSponsor.getText();
        selecttPrincipalArtist = (Artist) principalArtist.getSelectedItem();
        String classificationEvent = eventClassification.getSelectedItem().toString();
        String descriptionEvent = eventDescription.getText();
        int quorumEvent = Integer.parseInt(eventQuorum.getText());
        int duration = Integer.parseInt(eventDuration.getText());
        selectedLocation = (Location) eventLocation.getSelectedItem();
        selecttPrincipalArtist = (Artist) principalArtist.getSelectedItem();
        //tickets = 
        try {        
            cdao.saveConcert(new Concert(name, descriptionEvent, dateTime, selectedLocation,  duration,  sponsorEvent, classificationEvent,  quorumEvent,  selecttPrincipalArtist, invited, typeEvent),
                    tickets);
            
            //price = Double.parseDouble(locationPrice.getText());
            /*boolean message = concert.registerConcert(nameEvent, address, city, department, type, consideration, capacity, price);
            if (!message) {
            //showAdminHome(container);
            
            }else{
            JOptionPane.showMessageDialog(null, "There is already an artist with this same document number");
            }*/
        } catch (SQLException ex) {
            Logger.getLogger(CreateEventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_saveEventActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        showOrganizerHome(container);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void eventClassificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventClassificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventClassificationActionPerformed

    private void invitedArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invitedArtistActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_invitedArtistActionPerformed

    private void eventTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventTypeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_eventTypeActionPerformed

    private void eventQuorumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventQuorumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventQuorumActionPerformed

    private void addInvitedArtistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInvitedArtistButtonActionPerformed
             Artist selected = (Artist) invitedArtist.getSelectedItem();
            if (selected != null) {
                invited.add(selected);
            }
    }//GEN-LAST:event_addInvitedArtistButtonActionPerformed

    private void principalArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principalArtistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_principalArtistActionPerformed

    private void createTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTicketsActionPerformed
        int q = Integer.parseInt(eventQuorum.getText());
        TicketCreatePanel ccp = new TicketCreatePanel(q);
        JOptionPane.showConfirmDialog(
            null,
            ccp,
            "Create tickets and its categories",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE   
        );
        tickets = ccp.saveTickets();
    }//GEN-LAST:event_createTicketsActionPerformed

    public void getLocationCombo(){
       locationList = location.locationList(eventLocation); 
    }
    
    public void getArtistCombo(){
        eventArtists = artistUI.artistList(principalArtist);
    }
    
    public void setComboArtistI() {
        principalArtist.addActionListener(e -> {
            Object selectedItem = principalArtist.getSelectedItem();
            invitedArtist.removeAllItems();
            if (selectedItem != null) {
                eventArtistsI = artistUI.artistList(invitedArtist, selectedItem.toString());
            }
        });
    }
    
    
    public void newPanel() {
        String selectedType = eventType.getSelectedItem().toString();
        String ticketQ = eventQuorum.getText().trim();
        List<String> event = new ArrayList<String>();
        if (selectedType.equals("Concert")) {
            eventDurationTitle.setText("In Hours");
            String name = eventName.getText();
            principalArtist.removeAllItems();
            setComboArtistI();
            eventArtists = artistUI.artistList(principalArtist);
            title.setText("Create Concert");
            
            if (!ticketQ.isBlank() || name.isBlank()) {

            //eventCreatePanel.setLayout(new BorderLayout());
    //eventCreatePanel.add(concertPanel, BorderLayout.CENTER);
        } else{
            
        }
    }
/*
        try {
            int quantity = Integer.parseInt(tickets);
            concertPanel = new TicketCreatePanel(quantity);
            concertPanel.setSize(500, 100);
            concertPanel.setLocation(0, 0);
            eventCreatePanel.add(concertPanel, BorderLayout.CENTER);
        } catch (NumberFormatException e) {
            //JOptionPane.showMessageDialog(this, "Ticket quantity must be a number.");
        }

    } else if (selectedType.equals("Conference")) {
        principalArtist.removeAllItems();
        eventDuration.setText("In Hours");
        new SpeakerUI().spekertList(principalArtist);
        // Aquí podrías agregar ConferenceCreatePanel si lo tienes
    } else if (selectedType.equals("Festival")) {
        principalArtist.removeAllItems();
        eventDuration.setText("In Days");
        new ArtistUI().artistList(principalArtist);
        new SpeakerUI().spekertList(principalArtist);
        // Aquí podrías combinar paneles o usar uno especializado
    }

    eventCreatePanel.revalidate();
    eventCreatePanel.repaint();
}*/

    /*public void getArtistCombo(){
        
        
        switch (selec) {
            case "Concert":
                principalArtist.removeAllItems();
                eventDuration.setText("In Hours");
                new ArtistUI().artistList(principalArtist);
                TicketCreatePanel ccp = new  TicketCreatePanel(Integer.parseInt(ticketQuantity.getText()));
                ccp.setSize(696,127);
                ccp.setLocation(0,0);
                eventCreatePanel.removeAll();
                eventCreatePanel.add(ccp,BorderLayout.CENTER);
                eventCreatePanel.revalidate();
                eventCreatePanel.repaint();
                break;
            case "Conference":
                principalArtist.removeAllItems();
                eventDuration.setText("In Hours");
                new SpeakerUI().spekertList(principalArtist);
                break;
            case "Festival":
                principalArtist.removeAllItems();
                eventDuration.setText("In Days");
                new ArtistUI().artistList(principalArtist);
                new SpeakerUI().spekertList(principalArtist);
                break;
            default:
                principalArtist.removeAllItems();
        }*/
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addInvitedArtistButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createTickets;
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker;
    private javax.swing.JComboBox<String> eventClassification;
    private javax.swing.JTextPane eventDescription;
    private javax.swing.JTextField eventDuration;
    private javax.swing.JLabel eventDurationTitle;
    private javax.swing.JComboBox<String> eventLocation;
    private javax.swing.JTextField eventName;
    private javax.swing.JTextField eventQuorum;
    private javax.swing.JTextField eventSponsor;
    private javax.swing.JComboBox<String> eventType;
    private javax.swing.JComboBox<String> invitedArtist;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> principalArtist;
    private javax.swing.JButton saveEvent;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
