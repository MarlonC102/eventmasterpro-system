/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.event.master.pro.view.organizermanagement.event;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.event.master.pro.event.ticket.Ticket;
import org.event.master.pro.person.artist.Artist;
import org.event.master.pro.person.artist.ArtistUI;
import org.event.master.pro.util.UIUtil;

/**
 *
 * @author Luisa
 */
public class InvitedArtistPanel extends javax.swing.JPanel {

    ArtistUI artistUI = new ArtistUI();
    private int op;
    private String a;
    private List<Artist> eventArtistsI;

    /**
     * Creates new form InvitedArtistPanel
     */
    public InvitedArtistPanel(int op, String a, List<Artist> eventArtistsI) {
        initComponents();
        jScrollPane1.getViewport().setBackground(UIManager.getColor("Table.background"));
        this.a = a;
        this.op = op;
        this.eventArtistsI = eventArtistsI;
        setComboArtistI();
        tableArtist(eventArtistsI);
        UIUtil.eventButtons((DefaultTableModel) artistTableI.getModel(), artistTableI);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        artistTableI = new javax.swing.JTable();
        ticket = new javax.swing.JLabel();
        addArtistI = new javax.swing.JButton();
        tick = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        invitedArtist = new javax.swing.JComboBox<>();

        artistTableI.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artist", "Id", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(artistTableI);

        addArtistI.setText("Add artist");
        addArtistI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addArtistIActionPerformed(evt);
            }
        });

        jLabel1.setText("Artist:");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(ticket, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tick)
                                        .addGap(387, 387, 387))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(invitedArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addArtistI, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tick)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(addArtistI)
                        .addComponent(saveButton)
                        .addComponent(invitedArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ticket)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addArtistIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addArtistIActionPerformed
        DefaultTableModel modelArtistTable = (DefaultTableModel) artistTableI.getModel();
        int column = 0;
        boolean addedArtistI = false;
        Artist selected = (Artist) invitedArtist.getSelectedItem();
        String artist = invitedArtist.getSelectedItem().toString();
        for (int row = 0; row < artistTableI.getRowCount(); row++) {
            if (artist.equals(modelArtistTable.getValueAt(row, 0))) {
                addedArtistI = true;
                break;
            }
        }
        if (addedArtistI == false) {
            modelArtistTable.addRow(new Object[]{selected.getName(), selected.getIdArtist(), "Delete"});
        }
    }//GEN-LAST:event_addArtistIActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        //saveArtistInvited();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void tableArtist(List<Artist> eai) {
        DefaultTableModel modelTableEvent = (DefaultTableModel) artistTableI.getModel();
        for (Artist e : eai) {
            modelTableEvent.addRow(new Object[]{e.getName(), e.getIdArtist(), "Delete"});
            artistTableI.getColumnModel().getColumn(1).setMinWidth(0);
            artistTableI.getColumnModel().getColumn(1).setMaxWidth(0);
            artistTableI.getColumnModel().getColumn(1).setPreferredWidth(0);
        }
        //UIUtil.hideButtons(account.getRol(), speakerTable);
        //buttonsEvent();
    }

    public void setComboArtistI() {
        //invitedArtist.removeAllItems();
        switch (op) {
            case 0:
                artistUI.artistList(invitedArtist, a);
                break;
            case 1:
                artistUI.artistList(invitedArtist, a);
                break;
        }
    }

    List<Artist> saveArtistInvited() {
        List<Artist> artistList = new ArrayList<Artist>();
        DefaultTableModel model = (DefaultTableModel) artistTableI.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            String name = model.getValueAt(i, 0).toString();
            int id = Integer.parseInt(model.getValueAt(i, 1).toString());
            Artist artist = new Artist();
            artist.setIdArtist(id);
            artist.setName(name);

            artistList.add(artist);
        }
        return artistList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addArtistI;
    private javax.swing.JTable artistTableI;
    private javax.swing.JComboBox<String> invitedArtist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel tick;
    private javax.swing.JLabel ticket;
    // End of variables declaration//GEN-END:variables
}
